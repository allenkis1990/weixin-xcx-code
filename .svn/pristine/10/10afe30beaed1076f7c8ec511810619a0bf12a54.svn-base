const app = getApp()
let config = require('../../../config.js')
Page({

  /**
   * 页面的初始数据
   */
  data: {
    isShowLoginFailUI: false,
    //TODO 跳转类表页
    objectUrl: '/pages/trainclass/trainingClassList/trainingClassList'
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    var comtext = this
    var cookie = require('../../../utils/requestUtil.js').getCookie(app.config.apiHost)
    if (cookie === undefined || cookie === '') {
      comtext.getStorageUnionIdAndOpenId()
    } else {
      //尝试读取用户信息
      app.requestData(app.config.getUserInfo, {}, "GET").then(data => {
        if (data.head.code === app.constant.network_result_success) {
          app.userInfo = data.data.userInfo
          wx.reLaunch({
            url: comtext.data.objectUrl,
          })
        } else {
          comtext.getStorageUnionIdAndOpenId()
        }
      }).catch(e => {
        console.log(e)
        comtext.getStorageUnionIdAndOpenId()
      })
    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  },
  /**
   * 获取本地UnionIdAndOpenId数据
   */
  getStorageUnionIdAndOpenId() {
    var context = this
    app.utils.getStorageUnionIdAndOpenId().then(data => {
      if (data.success) {
        app.config.casConfig.unionId = data.unionId
        app.config.casConfig.openId = data.openId
        context.requestHasBindWX(data.unionId, data.openId)
      } else {
        context.requestCode()
      }
    }).catch(e => {
      context.requestCode()
      console.log(e)
    })
  },

  /**
   * 网络请求 判断账号是否绑定微信
   */
  requestHasBindWX(unionId, openId) {
    var that = this
    wx.showLoading({ title: '加载中......', mask: true })
    let param = {
      unionId: unionId,
      openId: openId,
      type: 1
    }
    app.requestData(app.config.haveBingWX, param, "POST").then(data => {
      wx.hideLoading()
      if (data.head.code != app.constant.network_result_success) {
        return wx.showToast({
          title: data.head.message,
          icon: 'none'
        })
      } else {
        // 微信是否绑定
        if (data.data.haveBind) {
          that.login()
        } else {
          wx.redirectTo({
            //跳转登录页
            url: '/pages/account/login/login'
          });
        }
      }
    }).catch(e => {
      wx.hideLoading()
    })
  },

  /**
   * 网路请求  微信获取code
   */
  requestCode() {
    var context = this
    // 登录
    wx.login({
      success: res => {
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
        if (res.code) {
          app.config.casConfig.code = res.code
          wx.getUserInfo({
            success: function (res) {
              context.requestUnionIdAndOpenId(app.config.casConfig.code, res.encryptedData, res.iv)
            },
            fail: function (){
              context.setData({ isShowLoginFailUI: true })
            }
          })
        }
      }
    })
  },

  /**
   * 网络请求 获取unionid和openid
   * @param code 
   * @param encryptedData  包括敏感数据在内的完整用户信息的加密数据
   * @param iv 加密算法的初始向量
   */
  requestUnionIdAndOpenId(code, encryptedData, iv) {
    var that = this
    var params = {
      code: code,
      encryptedData: encryptedData,
      iv: iv,
      type: 1
    }
    wx.showLoading({ title: '加载中......', mask: true })
    app.requestData(app.config.wxInfoUrl, params, "POST").then(data => {
      wx.hideLoading()
      if (data.head.code == app.constant.network_result_success) {
        //保存本地
        that.saveStorageUnionIdAndeOpenId(data.data.unionId, data.data.openId)
        //赋值全局
        app.config.casConfig.unionId = data.data.unionId
        app.config.casConfig.openId = data.data.openId
        app.config.casConfig.accessToken = data.data.accessToken
          //判断账号绑定情况
        that.requestHasBindWX(data.data.unionId, data.data.openId)
      } else {
        return wx.showToast({
          title: data.head.message,
          icon: 'none'
        })
      }
    }).catch(e => {
      wx.hideLoading()
      console.log(e)
    })
  },

  /**
   * 保存到本地缓存
   */
  saveStorageUnionIdAndeOpenId(unionId, openId) {
    wx.setStorage({
      key: 'unionId',
      data: unionId,
    })
    wx.setStorage({
      key: 'openId',
      data: openId,
    })
  },

  /**
   * 登录
   */
  login() {
    let loginResultCallback = this.loginResultCallback
    wx.showLoading({ title: '登录中......', mask: true })
    require('../../../utils/casLogin.js').loginWithWX(loginResultCallback)
  },

  /**
   * 点击事件--重新登录
   */
  LoginClick() {
    var comtext = this
    // 判断获取用户信息权限  没有进行授权
    wx.getSetting({
      success: res => {
        if (res.authSetting['scope.userInfo']) {
          //TODO 进入账号登录页  
          comtext.setData({ isShowLoginFailUI: false })
          comtext.getStorageUnionIdAndOpenId()
        } else {
          comtext.openConfirm();
        }
      }
    })
  },
  /**
   * 弹窗授权用户信息
   */
  openConfirm: function () {
    var comtext = this
    wx.showModal({
      content: '检测到您没授权用户信息，是否去设置打开？',
      confirmText: "确认",
      cancelText: "取消",
      success: function (res) {
        console.log(res);
        //点击“确认”时打开设置页面
        if (res.confirm) {
          console.log('用户点击确认')
          wx.openSetting({
            success: (res) => {
              if (res.authSetting["scope.userInfo"]) {
                //TODO 进入账号登录页
                comtext.setData({ isShowLoginFailUI: false })
                comtext.getStorageUnionIdAndOpenId()
              }
            }
          })
        } else {
          console.log('用户点击取消')
        }
      }
    });
  },

  /**
   * 登录流程结果回调
   * state: 0 成功；1帐号或密码不对；-1 网络请求异常
   */
  loginResultCallback(state, message) {
    var comtext = this
    switch (state) {
      case 0: {
        console.log('TODO 登录成功')
        var param = {
        }
        const app = getApp()
        app.getServeContextInfo()
        app.requestData(app.config.getUserInfo, param, "GET").then(data => {
          wx.hideLoading()
          if (data.head.code != app.constant.network_result_success) {
            return wx.showToast({
              title: '登录失败',
              icon: 'none'
            })
            comtext.setData({ isShowLoginFailUI: true })
          } else {
            app.userInfo = data.data.userInfo
            wx.reLaunch({
              url: comtext.data.objectUrl,
            })
          }
        }).catch(e => {
          wx.hideLoading()
          console.log(e)
        })
        break;
      }
      case 1: {
        comtext.setData({ isShowLoginFailUI: true })
        wx.hideLoading()
        console.log('TODO 帐号信息有误')
        break;
      }
      case -1: {
        comtext.setData({ isShowLoginFailUI: true })
        wx.hideLoading()
        console.log('TODO 网络请求异常')
        break;
      }
    }
  }
})