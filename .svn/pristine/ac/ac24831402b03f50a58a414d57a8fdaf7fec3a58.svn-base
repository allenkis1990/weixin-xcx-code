// pages/account/registered/registered.js
const app = getApp()
let config = require('../../../config.js')
Page({

  /**
   * 页面的初始数据
   */
  data: {
    identityCardNo: '',
    userName: '',
    phoneNum: '',
    password: '',
    againPassword: '',
    unitName: '',
    unionId: '',
    openId: '',
    accessToken: '',
    registerChannel: '',
    selectedGenderValue: -1,
    showGenderText: '请选择您的性别',
    genderList: [],
    cityId: "",
    districtId: "",
    areaInfo:{},
    prePickerIndex:[0,6]
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    this.generateGenderLisData()
    this.setAreaInfo()
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () { },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {
  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  },
  /**
   * 生成性别选中事件
   */
  generateGenderLisData() {
    let genderListData = [
      {
        name: '男',
        value: 1
      }, {
        name: '女',
        value: 2
      }
    ]
    this.setData({
      genderList: genderListData
    })
  },
  setAreaInfo(){
    let regionData = app.getRegionData()
    if (regionData !== undefined && regionData.cities !== undefined && regionData.cities.length) {
      this.setData({
        areaInfo: regionData
      })
    }
  },

  _pickerConfirmAction(event) {
    let ids = event.detail.ids
    let names = event.detail.names
    this.data.cityId = ids[0]
    this.data.districtId = ids[1]
  },
  /**
   * 选中性别事件
   */
  bindSexChange(event) {
    let genderItem = this.data.genderList[event.detail.value]
    this.setData({
      showGenderText: genderItem.name,
      selectedGenderValue: genderItem.value
    })
  },
  /**
   * 读取页面输入值
   */
  inputStringOclick: function (e) {
    switch (e.currentTarget.dataset.inputKey) {
      case 'inputAccount':
        this.setData({
          identityCardNo: e.detail.value
        })
        break
      case 'inputName':
        this.setData({
          userName: e.detail.value
        })
        break
      case 'inputPhoneNumber':
        this.setData({
          phoneNum: e.detail.value
        })
        break
      case 'inputPassword':
        this.setData({
          password: e.detail.value
        })
        break
      case 'inputAgainPassword':
        this.setData({
          againPassword: e.detail.value
        })
        break
      case 'inputUnitName':
        this.setData({
          unitName: e.detail.value
        })
        break
    }
  },

  /**
   * 点击事件--注册
   */
  registeredClick() {
    var that = this
    if (app.utils.empty(that.data.identityCardNo)) {
      return wx.showToast({
        title: '身份证号不可为空',
        icon: 'none'
      })
    }

    if (!app.utils.verIdentification(that.data.identityCardNo)) {
      return wx.showToast({
        title: '请输入18位身份证号！',
        icon: 'none'
      })
    }

    if (app.utils.empty(that.data.userName)) {
      return wx.showToast({
        title: '姓名不可为空',
        icon: 'none'
      })
    }
    if (this.data.selectedGenderValue == -1) {
      return wx.showToast({
        title: '请选择性别',
        icon: 'none'
      })
    }
    if (app.utils.empty(that.data.unitName)) {
      return wx.showToast({
        title: '单位名称不可为空',
        icon: 'none'
      })
    }
    if (!this.data.cityId.length) {
      return wx.showToast({
        title: '请选择您的证件所在地区',
        icon: 'none'
      })
    }
    if (app.utils.empty(that.data.phoneNum)) {
      return wx.showToast({
        title: '手机号不可为空',
        icon: 'none'
      })
    }
    if (!(that.data.phoneNum.length == 11)) {
      return wx.showToast({
        title: '请输入11位手机号！',
        icon: 'none'
      })
    }

    if (app.utils.empty(that.data.password)) {
      return wx.showToast({
        title: '密码不可为空',
        icon: 'none'
      })
    }
    if (app.utils.empty(that.data.againPassword)) {
      return wx.showToast({
        title: '确认密码不可为空',
        icon: 'none'
      })
    }

    var regEx = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,18}$/;
    if (!regEx.test(this.data.password)) {
      return wx.showToast({
        title: '请输入6~18位由字母、数字组成的密码！',
        icon: 'none'
      });
    }

    if (!regEx.test(this.data.againPassword)) {
      return wx.showToast({
        title: '请输入6~18位由字母、数字组成的确认密码！',
        icon: 'none'
      });
    }
    if (this.data.password != this.data.againPassword) {
      return wx.showToast({
        title: '密码前后不一致，请核查！',
        icon: 'none'
      });
    }

    that.requestAccountLegal()
  },

  /**
   * 网络请求--账号是否合法
   */
  requestAccountLegal() {
    this.getStorageUnionIdAndOpenId()
  },

  /**
   * 网络请求--注册
   */
  requestRegisteredInfo() {
    wx.showLoading({
      title: '注册中，请稍等...',
    })
    var that = this
    let params = {
      identityCardNo: that.data.identityCardNo,
      userName: that.data.userName,
      phoneNum: that.data.phoneNum,
      password: that.data.password,
      unitName: that.data.unitName,
      gender: this.data.selectedGenderValue,
      cityId: this.data.cityId,
      districtId: this.data.districtId,
      unionId: app.config.casConfig.unionId,
      openId: app.config.casConfig.openId,
      accessToken: app.config.casConfig.accessToken,
      type: 1
    }
    app.requestData(app.config.perfectInformation, params, 'POST').then(data => {
      wx.hideLoading()
      if (data.head.code != app.constant.network_result_success) {
        return wx.showToast({
          title: data.head.message,
          icon: 'none'
        });
      } else {
        wx.showToast({
          title: '注册成功！',
          icon: 'none'
        });
        that.login()
      }
    })
  },

  /**
   * 登录
   */
  login() {
    let loginResultCallback = this.loginResultCallback
    wx.showLoading({ title: '登录中......', mask: true })
    require('../../../utils/casLogin.js').loginWithWX(loginResultCallback)
  },

  /**
   * 登录流程结果回调
   * state: 0 成功；1帐号或密码不对；-1 网络请求异常
   */
  loginResultCallback(state, message) {
    switch (state) {
      case 0: {
        console.log('TODO 登录成功')
        var param = {
        }
        const app = getApp()
        app.getUserReceiveAddress()
        app.requestData(app.config.getUserInfo, param, "GET").then(data => {
          wx.hideLoading()
          if (data.head.code != app.constant.network_result_success) {
            return wx.showToast({
              title: '登录失败',
              icon: 'none'
            });
          } else {
            app.userInfo = data.data.userInfo
            wx.reLaunch({
              url: '/pages/trainclass/trainingClassList/trainingClassList',
            })
          }
        }).catch(e => {
          wx.hideLoading()
          console.log(e)
        })
        break;
      }
      case 1: {
        wx.hideLoading()
        console.log('TODO 帐号信息有误')
        break;
      }
      case -1: {
        wx.hideLoading()
        console.log('TODO 网络请求异常')
        break;
      }
    }
  },

  /**
   * 获取本地UnionIdAndOpenId数据
   */
  getStorageUnionIdAndOpenId() {
    var context = this
    app.utils.getStorageUnionIdAndOpenId().then(data => {
      if (data.success) {
        app.config.casConfig.unionId = data.unionId
        app.config.casConfig.openId = data.openId
        context.requestRegisteredInfo()
      } else {
        context.requestCode()
      }
    }).catch(e => {
      context.requestCode()
      console.log(e)
    })
  },

  /**
 * 网路请求  微信获取code
 * index--区分自动登录
 */
  requestCode() {
    var context = this
    // 登录
    wx.login({
      success: res => {
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
        if (res.code) {
          app.config.casConfig.code = res.code
          wx.getUserInfo({
            success: function (res) {
              app.wxUserInfo = res.userInfo
              context.requestUnionIdAndOpenId(app.config.casConfig.code, res.encryptedData, res.iv)
            }
          })
        }
      }
    })
  },
  /**
 * 保存到本地缓存
 */
  saveStorageUnionIdAndeOpenId(unionId, openId) {
    wx.setStorage({
      key: 'unionId',
      data: unionId,
    })
    wx.setStorage({
      key: 'openId',
      data: openId,
    })
  },
  /**
 * 网络请求 获取unionid和openid
 * @param code 
 * @param encryptedData  包括敏感数据在内的完整用户信息的加密数据
 * @param iv 加密算法的初始向量
 */
  requestUnionIdAndOpenId(code, encryptedData, iv) {
    var that = this
    var params = {
      code: code,
      encryptedData: encryptedData,
      iv: iv,
      type: 1
    }
    wx.showLoading({ title: '加载中......', mask: true })
    app.requestData(app.config.wxInfoUrl, params, "POST").then(data => {
      wx.hideLoading()
      if (data.head.code == app.constant.network_result_success) {
        //保存本地
        that.saveStorageUnionIdAndeOpenId(data.data.unionId, data.data.openId)
        //赋值全局
        app.config.casConfig.unionId = data.data.unionId
        app.config.casConfig.openId = data.data.openId
        app.config.casConfig.accessToken = data.data.accessToken
        that.requestRegisteredInfo()
      } else {
        return wx.showToast({
          title: data.head.message,
          icon: 'none'
        })
      }
    }).catch(e => {
      wx.hideLoading()
      console.log(e)
    })
  }
})