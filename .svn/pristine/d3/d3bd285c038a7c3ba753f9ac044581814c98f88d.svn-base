//获取应用实例
const app = getApp()
const urlConst = require('../../../config')
Page({
  /**
   * 页面的初始数据
   */
  data: {
    currentNavtab: -1,
    navTab: [{ name: '课程', textValue: '已学-%', value: 1 }, { name: '练习', textValue: '已答-题', value: 2 }, { name: '考试', textValue: '已得-分', value: 3 }],
    trainDetail: {},
    courseList: [],
    examList: [],
    trainingClassId: '',
    examPassScore: '',
    hasRefreshDataType: '',// 刷新类型  0  默认 1 播放视频返回 2 考试
    requireCourseHours: 0,
    remainingPeriod: 0,//选课还需选学时。
    selectedHours: 0, // 选课已选多少学时。
    isShowBottomImage: false,
    //刷新接口数据类型：1.进入练习|2.播放页返回|3.进入考试页|4.进入选修课
    refreshDataType: 0,
  },

  //allowExamCount
  // 0 学员未考试过 
  //1 考试次数用完，考试未通过   
  //2 考试未通过，还有考试次数 
  //3 考试已通过

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    // 初始化
    new app.AlertMessage()
    new app.WeToast()
    this.setData({
      trainingClassId: options.trainingClassId
    })
    this.requestClassDetail()
    this.requestCourseList()
    this.requestExamList()
    this.alert = this.selectComponent("#alert")

  },
  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    if (app.constant.classDetailSceneType == 1) {
      // 课程播放返回 考试返回
      this.requestClassDetail()
      this.requestCourseList(1)
      app.constant.classDetailSceneType = 0
    } else if (app.constant.classDetailSceneType == 2) {
      this.requestClassDetail()
      this.requestExamList(1)
      app.constant.classDetailSceneType = 0
    } else if (app.constant.classDetailSceneType == 3) {
      //进入练习题
      this.requestClassDetail()
      app.constant.classDetailSceneType = 0
    } else if (app.constant.classDetailSceneType == 4){
      // 选课回来之后重新请求课程列表
      this.requestClassDetail()
      this.requestCourseList(1)
      this.requestSelectedCourseInfo()
      app.constant.classDetailSceneType = 0
    }
  },
  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {
    wx.showNavigationBarLoading()
    if (this.data.currentNavtab == 0) {
      this.requestCourseList(0)
    } else if (this.data.currentNavtab == 1) {
      this.requestExamList(0)
    }
  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },
  switchTab(e) {
    // if (!this.data.trainDetail.haveExam) return this.wetoast.toast({ title: '考试未配置' })
    let item = e.currentTarget.dataset.item
    this.setData({
      currentNavtab: item.value,
    });
  },
  goToAccessmentInfomation() {
    wx.navigateTo({
      url: '/pages/trainclass/assessmentInformation/assessmentInformation' + "?trainingClassId=" + this.data.trainingClassId
    })
  },
  countRequireHours(courseList) {
    var hours = 0
    for (var i = 0; i < courseList.length; i++) {
      if (courseList[i].courseType == 0) {
        hours = hours + courseList[i].period
      }
    }
    this.setData({
      requireCourseHours: hours
    })
  },
  /**
   * 网络请求   班级详情数据
   */
  requestClassDetail() {
    var comtext = this
    var param = {
      trainingClassId: this.data.trainingClassId
    }
    wx.showLoading({ title: '加载中......', mask: true })
    app.requestData(app.config.trainingClassDetail, param, "GET").then(data => {
      wx.hideLoading()
      if (data.head.code !== app.constant.network_result_success) {
        //网络请求失败
        return this.wetoast.toast({ title: data.head.message })
      }
      if (data.head.code === '31203' || data.head.code === 31203) {
        this.wetoast.toast({ title: data.head.message })
        wx.navigateBack({
          delta: 1
        })
      }
      this.filledDataFortab(data.data)
      if (data.data.hasSelectCourse) {
        //debugger
        comtext.requestSelectedCourseInfo()
      }
      this.setData({
        examPassScore: data.data.assessInformation.assessPassScore,
        trainDetail: data.data
      })
    }).catch(e => {
      wx.hideLoading()
      console.log(e)
    })
  },

  /**
   * 网络请求   课程列表
   * type:0 刷新 1 加载 2 班级列表进入
   */
  requestCourseList(type) {
    var param = {
      trainingClassId: this.data.trainingClassId
    }
    if (type == 0) {
      wx.showLoading({ title: '加载中......', mask: true })
    }
    app.requestData(app.config.trainingClassCourseList, param, "POST").then(data => {
      if (type == 0) {
        wx.hideLoading()
        wx.hideNavigationBarLoading()
        wx.stopPullDownRefresh()
      }
      if (data.head.code !== app.constant.network_result_success) {
        //网络请求失败
        return this.wetoast.toast({ title: data.head.message })
      }
      //数据赋值
      this.setData({
        courseList: data.data.courseList
      })
      this.countRequireHours(data.data.courseList)
    }).catch(e => {
      if (type == 0) {
        wx.hideLoading()
        wx.hideNavigationBarLoading()
        wx.stopPullDownRefresh()
      }
      console.log(e)
    })
  },
  /**
   * 网络请求    考试列表
   * type:0 刷新 1 加载 2 班级列表进入
   */
  requestExamList(type) {
    var param = {
      trainingClassId: this.data.trainingClassId
    }
    if (type == 0) {
      wx.showLoading({ title: '加载中......', mask: true })
      wx.hideNavigationBarLoading()
      wx.stopPullDownRefresh()
    }
    app.requestData(app.config.trainingClassExamList, param, "GET").then(data => {
      if (type == 0) {
        wx.hideLoading()
      }
      if (data.head.code !== app.constant.network_result_success) {
        //网络请求失败
        return this.wetoast.toast({ title: data.head.message })
      }
      //数据赋值
      this.setData({
        examList: data.data.examRoundList
      })
    }).catch(e => {
      if (type == 0) {
        wx.hideLoading()
        wx.hideNavigationBarLoading()
        wx.stopPullDownRefresh()
      }
      console.log(e)
    })
  },
  /**
   * 网络请求    培训班课程选课学时信息
   */
  requestSelectedCourseInfo() {
    var param = {
      trainingClassId: this.data.trainingClassId
    }
    // wx.showLoading({ title: '加载中......', mask: true })
    app.requestData(app.config.trainingClassSelectedInfo, param, "GET").then(data => {
      // wx.hideLoading()
      if (data.head.code !== app.constant.network_result_success) {
        //网络请求失败
        return this.wetoast.toast({ title: data.head.message })
      }
      //数据赋值
      this.setData({
        remainingPeriod: data.data.remainingHours,
        selectedHours: data.data.selectedHours
      })
    }).catch(e => {
      // wx.hideLoading()
      console.log(e)
    })
  },

  /**
 * 点击事件--去选课页面
 */
  selectedCourseClick() {
    this.setData({
    });
    wx.navigateTo({
      url: ''
    })
  },

  /**
   * tab--数据填充
   */
  filledDataFortab(data) {
    var context = this
    if (!data.selectConfiguration.length) {
      return
    }
    if (data.selectConfiguration.length <= 1) {
      context.setData({
        isShowBottomImage: false
      })
    } else {
      context.setData({
        isShowBottomImage: true
      })
    }

    // 1.表示配置课程|2.表示配置练习|3.表示配置考试
    var newNavTab = []
    data.selectConfiguration = this.renewLogSort(data.selectConfiguration)
    for (let index = 0; index < data.selectConfiguration.length; index++) {
      let item = data.selectConfiguration[index]
      switch (item) {
        case "1": {
          newNavTab.push({
            name: '课程',
            textValue: '已学' + data.completePercent + '%',
            value: 1
          })
          break
        }
        case "2": {
          newNavTab.push({
            name: '练习',
            textValue: '已答' + context.judgeFristUI(data.practiceHistoryNum) + '题',
            value: 2
          })
          break
        }
        case "3": {
          newNavTab.push({
            name: '考试',
            textValue: '已得' + context.judgeFristUI(data.examOriginalScore) + '分',
            value: 3
          })
          break
        }
      }
    }
    if (this.data.currentNavtab == -1){
      this.setData({
        navTab: newNavTab,
        currentNavtab: newNavTab[0].value
      })
    }else{
      this.setData({
        navTab: newNavTab,
        currentNavtab: this.data.currentNavtab
      })
    }

  },

  /**
   * 判断是否显示“-”
   */
  judgeFristUI(number) {
    if (number == -1) {
      return '-'
    } else {
      return number
    }
  },
  /**
    * 重排数据
    */
  renewLogSort: function (array) {
    // 冒泡排序
    var len = array.length
    if (len == 0) {
      return []
    }
    for (var i = 0; i < len; i++) {
      for (var j = 0; j < len - 1 - i; j++) {
        if (parseInt(array[j]) > parseInt(array[j + 1])) {
          var temp = array[j]
          array[j] = array[j + 1]
          array[j + 1] = temp
        }
      }
    }
    return array
  },
  /**
   * 回调函数--去选课弹窗提示
   */
  goToChoiceCourseCallback() {
    this.alert.show('已达到选课要求，无需继续选课!')
  },
  _enterPracticeCallBackAction() {

  },
  _enterHistoryPracticeCallBackAction() {

  },
  _enterExamCallBackAction() {

  },
  _enterHistoryExamCallBackAction() {

  }

})



